{"name":"Cenny.js","tagline":"The plug 'n play backend for web apps.","body":"cenny.js\r\n========\r\n\r\n###A realtime backend for web apps.\r\nCenny.js is a plug 'n play, simple, and open backend for web apps of all shapes and sizes. \r\n\r\n\r\nCenny.js was built to make building powerful real-time web apps simple, even managing users. You won't have to touch a single line\r\nof server code if you don't want to. It's all easily accessed with pure Javascript. No networking code here.\r\n\r\n___\r\n\r\n##The Idea\r\n\r\nCenny.js works on the bases of users. A user is a special \"location\" where data can be stored. These\r\nusers can then be stored in groups, think of a group as a folder containing a list of users. A user holds a main JS ```Object``` \r\nin which properties can be added and removed, *all data stored in a user is contained within this main ```Object```.*\r\n\r\n**Domain (root) --> Group --> User --> main JS Object --> properties**\r\n\r\n##Setup\r\n\r\nFirst, you'll need to add **cenny.php** (inside the ```server``` directory) to your server, this is what **cenny.js** (```client``` directory) will communicate with.\r\n\r\nSecondly, add **cenny.js** to the ```<head>``` of any html document, just like any other JS script.\r\n\r\n##Cenny.js Documentation\r\n\r\nCenny.js is object based, so you'll first need to create a fresh instance of the Cenny object.\r\n\r\n\r\n```javascript\r\n   var backend = new Cenny( {url: 'url.to/cenny.php'} ); \r\n```\r\n*The first parameter is an object containing the property 'url', this is the url referring to cenny.php on your server.*\r\n\r\n   *All data stored, transferred, and retrieved with Cenny is object based, so instead of storing \"hello world\", it should\r\n   be stored as {name: \"hello world\"}.*\r\n   \r\nAnyways, from here, let's set some data to our backend.\r\n```javascript\r\n   backend.set({sky: 'is high.'});\r\n```\r\n\r\n\r\nYay! Now let's retrieve that data.\r\n```javascript\r\n   backend.get(function(returnedData){\r\n           console.log(returnedData); //outputs {sky: 'is high.'}\r\n   });\r\n```\r\n*This method connects to cenny.php and retrieves the data, then passes it to the callback function.*\r\n\r\nGreat, but ```.set()``` replaces existing data. Let's keep the data we already have stored and just add to it.\r\n```javascript\r\n   backend.update({another: [1,2,3]}); //the data is now {sky: 'is high.', another: [1,2,3]}\r\n   backend.update( {DELETE: ['another', 'etc']} ); //removes properties\r\n```\r\n*This method uses .get() and .set() to update, but not replace data.*\r\n\r\nOk, but what if someone across the world ```.update()```s this data? How can we get, in real-time, \r\nthe new data when it changes?\r\n```javascript\r\n   backend.modified(function(returnedData) {\r\n           console.log(returnedData);  \r\n   });\r\n```\r\nOptionally, the second parameter can be an array of specific properties to watch, instead of all data.\r\n*The callback function (first parameter) will be passed the data only when it is edited.*\r\n\r\n\r\n___\r\n\r\n###Users\r\n\r\nUsers can be used to keep data protected from prying eyes. They work the same as a Facebook user, or Youtube account.\r\n\r\nBy default, when a new instance of Cenny is created, the user is \"default\" with the password \"default\".\r\nTo create a new user, or login to an existing user, we'll need to create a new instance of the Cenny object.\r\n\r\n```javascript\r\nvar fresh = new Cenny( {url: 'url.to/cenny', user: ['username', 'password']} );\r\n```\r\n*Since this user does not exist, it will be created. If the user had already existed, it would be logged in.*\r\n\r\nBy default, **anyone can view data in a user**, however, this can easily be disabled.\r\n```javascript\r\nvar fresh = new Cenny( {url: 'url.to/cenny', user: ['username', 'password', false]} );\r\n```\r\n*Setting the third item in the user Array to ```false``` disables read access.*\r\n\r\nTo get data from a user that has read access **enabled**:\r\n```javascript\r\nfresh.user.get( callback, 'username' );\r\n```\r\n*Remember, this only works with users that have read access enabled.*\r\n\r\nNow that we're signed in, we'll probably want to remember that complicated password and username.\r\n```javascript\r\nfresh.user.remember();\r\n```\r\n*This uses the localStorage object to save the username and password to the user's computer, if a username and password are not provided when defining a new instance of Cenny, these credentials will be used.*\r\n\r\n...And once we remember that our complicated username and password are not that complicated at all, we'll want to forget them.\r\n```javascript\r\nfresh.user.forget();\r\n```\r\n\r\nIf our brand new user starts to get stale and we long for a new one, we can remove it completely.\r\n```javascript\r\nfresh.user.remove();\r\n```\r\n*You MUST be signed in to do this, but be careful, no going back from here.*\r\n\r\nLet's say you want to signin to a different user, that's simple.\r\n```javascript\r\nfresh.user.signin( { user:['businessPro', 'hardPassword']} );\r\n```\r\n\r\nWe can also easily attach an email to our user.\r\n```javascript\r\nfresh.user.setEmail(email); //set email\r\n\r\nfresh.user.getEmail(callback); //retrieve email\r\n```\r\n\r\nAnyone can retrieve any user's email by its username.\r\n```javascript\r\nfresh.user.getEmail(callback, username);\r\n```\r\n\r\n___\r\n\r\n###Groups\r\n\r\nGroups can be used to separate groups of users, or multiple web apps.\r\n\r\nBy default, when a new instance of Cenny is created, the group \"default\" with the key \"default\" is used. *All users are stored in groups.*\r\nTo create a new group, or access an existing one, we'll need to create a new instance of the Cenny object.\r\n\r\n\r\n```javascript\r\nvar fresh = new Cenny( {url: 'url.to/cenny', group: ['groupName', 'secretKey']} );\r\n```\r\n*Since this group does not exist, it will be created. If the group had already existed, it would be accessed.*\r\n\r\nGroups cannot be removed from cenny.js, if you would like to remove a group, you'll need to remove the directory from the server.\r\n\r\n___\r\n\r\n##No fluff documentation\r\n\r\nDefine a new Cenny.\r\n```javascript\r\nvar x = new Cenny( {url: 'url.to.cenny', user:['username', 'password'], group: ['name', 'key']} );\r\n```\r\n\r\nSet data (replaces existing data).\r\n```javascript\r\nx.set( {} );\r\n```\r\n\r\nGet data.\r\n```javascript\r\nx.get( callback );\r\n```\r\n\r\nGet data from another user (if allowed).\r\n```javascript\r\nx.get( callback, 'username' );\r\n```\r\n\r\nUpdate data.\r\n```javascript\r\nx.update( {property: null, DELETE: ['property']} );\r\n```\r\n\r\nWatch data.\r\n```javascript\r\nx.modified( function(d) {}, ['property1', '2', 'three'] );\r\n```\r\n\r\nRemember user.\r\n```javascript\r\nx.user.remember();\r\n```\r\n\r\nForget user.\r\n```javascript\r\nx.user.forget();\r\n```\r\n\r\nRemove user.\r\n```javascript\r\nx.user.remove();\r\n```\r\n\r\nSignin to another user.\r\n```javascript\r\nx.user.signin( {user:['username', 'password']} );\r\n```\r\n\r\nSet user email.\r\n```javascript\r\nx.user.setEmail( 'email' );\r\n```\r\n\r\nGet user email.\r\n```javascript\r\nx.user.getEmail( callback, 'username' );\r\n```\r\n\r\n___\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}